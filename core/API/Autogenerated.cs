// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using API;
//
//    var clientOption = ClientOption.FromJson(jsonString);
//    var clientRegisterOption = ClientRegisterOption.FromJson(jsonString);
//    var optionType = OptionType.FromJson(jsonString);
//    var optionValues = OptionValues.FromJson(jsonString);
//    var pollParticipants = PollParticipants.FromJson(jsonString);
//    var resultVotingMode = ResultVotingMode.FromJson(jsonString);
//    var votingMode = VotingMode.FromJson(jsonString);
//    var channel = Channel.FromJson(jsonString);
//    var icon = Icon.FromJson(jsonString);
//    var registerOption = RegisterOption.FromJson(jsonString);
//    var numberRegisterOption = NumberRegisterOption.FromJson(jsonString);
//    var boolRegisterOption = BoolRegisterOption.FromJson(jsonString);
//    var stringRegisterOption = StringRegisterOption.FromJson(jsonString);
//    var boolOption = BoolOption.FromJson(jsonString);
//    var numberOption = NumberOption.FromJson(jsonString);
//    var stringOption = StringOption.FromJson(jsonString);
//    var modificationInfo = ModificationInfo.FromJson(jsonString);
//    var authorization = Authorization.FromJson(jsonString);
//    var authorizationSuccess = AuthorizationSuccess.FromJson(jsonString);
//    var ok = Ok.FromJson(jsonString);
//    var pollError = PollError.FromJson(jsonString);
//    var pollResult = PollResult.FromJson(jsonString);
//    var pollStarted = PollStarted.FromJson(jsonString);
//    var pollWinner = PollWinner.FromJson(jsonString);
//    var setConfig = SetConfig.FromJson(jsonString);
//    var setConfigData = SetConfigData.FromJson(jsonString);
//    var startPoll = StartPoll.FromJson(jsonString);
//    var startPollOption = StartPollOption.FromJson(jsonString);
//    var clientInitialize = ClientInitialize.FromJson(jsonString);
//    var clientInitializeModification = ClientInitializeModification.FromJson(jsonString);
//    var clientInitialized = ClientInitialized.FromJson(jsonString);
//    var clientRegister = ClientRegister.FromJson(jsonString);
//    var clientRegisterModification = ClientRegisterModification.FromJson(jsonString);
//    var executionStarted = ExecutionStarted.FromJson(jsonString);
//    var executionStartRequest = ExecutionStartRequest.FromJson(jsonString);
//    var executionStopped = ExecutionStopped.FromJson(jsonString);
//    var executionStopRequest = ExecutionStopRequest.FromJson(jsonString);
//    var infoMessage = InfoMessage.FromJson(jsonString);
//    var infoOpen = InfoOpen.FromJson(jsonString);
//    var infoOpenData = InfoOpenData.FromJson(jsonString);
//    var infoSubscribe = InfoSubscribe.FromJson(jsonString);
//    var infoUnsubscribe = InfoUnsubscribe.FromJson(jsonString);
//    var nextPoll = NextPoll.FromJson(jsonString);
//    var nextPollCanceled = NextPollCanceled.FromJson(jsonString);
//    var configAvailable = ConfigAvailable.FromJson(jsonString);
//    var configAvailableClient = ConfigAvailableClient.FromJson(jsonString);
//    var configAvailableModification = ConfigAvailableModification.FromJson(jsonString);
//    var configChange = ConfigChange.FromJson(jsonString);
//    var configChangeClient = ConfigChangeClient.FromJson(jsonString);
//    var configChangeModification = ConfigChangeModification.FromJson(jsonString);
//    var configChangeOptions = ConfigChangeOptions.FromJson(jsonString);
//    var configRegister = ConfigRegister.FromJson(jsonString);
//    var configStart = ConfigStart.FromJson(jsonString);
//    var configStop = ConfigStop.FromJson(jsonString);
//    var interfaceSettings = InterfaceSettings.FromJson(jsonString);
//    var pollSettings = PollSettings.FromJson(jsonString);
//    var viewerAuthorization = ViewerAuthorization.FromJson(jsonString);
//    var pollStopped = PollStopped.FromJson(jsonString);
//    var viewerRole = ViewerRole.FromJson(jsonString);
//    var vote = Vote.FromJson(jsonString);
//    var pluralityNumberWeightedRandomNumber = PluralityNumberWeightedRandomNumber.FromJson(jsonString);
//    var recordStringAny = RecordStringAny.FromJson(jsonString);
//    var partialInterfaceSettings = PartialInterfaceSettings.FromJson(jsonString);
//    var partialPollSettings = PartialPollSettings.FromJson(jsonString);

namespace API
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class RegisterOption
    {
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
    }

    public partial class NumberRegisterOption
    {
        [J("default", Required = R.Always)] public decimal Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("numType", Required = R.Always)] public NumType NumType { get; set; }
        [J("validValues", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<decimal> ValidValues { get; set; }
    }

    public partial class BoolRegisterOption
    {
        [J("default", Required = R.Always)] public bool Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
    }

    public partial class StringRegisterOption
    {
        [J("default", Required = R.Always)] public string Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("validValues", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<string> ValidValues { get; set; }
    }

    public partial class BoolOption
    {
        [J("default", Required = R.Always)] public bool Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("value", Required = R.Always)] public bool Value { get; set; }
    }

    public partial class NumberOption
    {
        [J("default", Required = R.Always)] public decimal Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("numType", Required = R.Always)] public NumType NumType { get; set; }
        [J("validValues", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<decimal> ValidValues { get; set; }
        [J("value", Required = R.Always)] public decimal Value { get; set; }
    }

    public partial class StringOption
    {
        [J("default", Required = R.Always)] public string Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("validValues", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<string> ValidValues { get; set; }
        [J("value", Required = R.Always)] public string Value { get; set; }
    }

    public partial class Authorization
    {
        [J("data", Required = R.Always)] public AuthorizationData Data { get; set; }
        [J("type", Required = R.Always)] public AuthorizationType Type { get; set; }
    }

    public partial class AuthorizationData
    {
        [J("code", Required = R.Always)] public string Code { get; set; }
    }

    public partial class AuthorizationSuccess
    {
        [J("data", Required = R.Always)] public Channel Data { get; set; }
        [J("type", Required = R.Always)] public AuthorizationSuccessType Type { get; set; }
    }

    public partial class Channel
    {
        [J("id", Required = R.Always)] public decimal Id { get; set; }
        [J("logo", Required = R.Always)] public string Logo { get; set; }
        [J("name", Required = R.Always)] public string Name { get; set; }
    }

    public partial class Ok
    {
        [J("type", Required = R.Always)] public OkType Type { get; set; }
    }

    public partial class PollError
    {
        [J("reason", Required = R.Always)] public string Reason { get; set; }
        [J("type", Required = R.Always)] public PollErrorType Type { get; set; }
    }

    public partial class PollResult
    {
        [J("data", Required = R.Always)] public PollResultData Data { get; set; }
        [J("type", Required = R.Always)] public PollResultType Type { get; set; }
    }

    public partial class PollResultData
    {
        [J("mode", Required = R.Always)] public PluralityNumberWeightedRandomNumber Mode { get; set; }
        [J("mods", Required = R.Always)] public Dictionary<string, Mod> Mods { get; set; }
        [J("nothing", Required = R.Always)] public decimal Nothing { get; set; }
    }

    public partial class PluralityNumberWeightedRandomNumber
    {
        [J("plurality", Required = R.Always)] public decimal Plurality { get; set; }
        [J("weighted_random", Required = R.Always)] public decimal WeightedRandom { get; set; }
    }

    public partial class Mod
    {
        [J("count", Required = R.Always)] public decimal Count { get; set; }
        [J("duration", Required = R.Always)] public decimal Duration { get; set; }
    }

    public partial class PollStarted
    {
        [J("type", Required = R.Always)] public PollStartedType Type { get; set; }
    }

    public partial class PollWinner
    {
        [J("data", Required = R.Always)] public PollWinnerData Data { get; set; }
        [J("type", Required = R.Always)] public PollWinnerType Type { get; set; }
    }

    public partial class PollWinnerData
    {
        [J("duration", Required = R.Always)] public decimal Duration { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("totalVotes", Required = R.Always)] public decimal TotalVotes { get; set; }
        [J("votes", Required = R.Always)] public decimal Votes { get; set; }
    }

    public partial class SetConfig
    {
        [J("data", Required = R.Always)] public SetConfigData Data { get; set; }
        [J("type", Required = R.Always)] public SetConfigType Type { get; set; }
    }

    public partial class SetConfigData
    {
        [J("durationTooltip", Required = R.Always)] public string DurationTooltip { get; set; }
        [J("mode", Required = R.Always)] public VotingModeEnum Mode { get; set; }
        [J("modificationsHeader", Required = R.Always)] public string ModificationsHeader { get; set; }
        [J("nextPollText", Required = R.Always)] public string NextPollText { get; set; }
        [J("noModificationName", Required = R.Always)] public string NoModificationName { get; set; }
        [J("noModificationTooltip", Required = R.Always)] public string NoModificationTooltip { get; set; }
        [J("notRegisteredHeader", Required = R.Always)] public string NotRegisteredHeader { get; set; }
        [J("notRegisteredText", Required = R.Always)] public string NotRegisteredText { get; set; }
        [J("participants", Required = R.Always)] public Participants Participants { get; set; }
        [J("pluralityName", Required = R.Always)] public string PluralityName { get; set; }
        [J("pluralityTooltip", Required = R.Always)] public string PluralityTooltip { get; set; }
        [J("pollEndedText", Required = R.Always)] public string PollEndedText { get; set; }
        [J("secondsLeftText", Required = R.Always)] public string SecondsLeftText { get; set; }
        [J("subscribersOnlyHeader", Required = R.Always)] public string SubscribersOnlyHeader { get; set; }
        [J("subscribersOnlyText", Required = R.Always)] public string SubscribersOnlyText { get; set; }
        [J("votingModeHeader", Required = R.Always)] public string VotingModeHeader { get; set; }
        [J("weightedRandomName", Required = R.Always)] public string WeightedRandomName { get; set; }
        [J("weightedRandomTooltip", Required = R.Always)] public string WeightedRandomTooltip { get; set; }
        [J("winnerName", Required = R.Always)] public string WinnerName { get; set; }
        [J("winnerText", Required = R.Always)] public string WinnerText { get; set; }
        [J("winnerTextNoModification", Required = R.Always)] public string WinnerTextNoModification { get; set; }
    }

    public partial class StartPoll
    {
        [J("data", Required = R.Always)] public StartPollData Data { get; set; }
        [J("type", Required = R.Always)] public StartPollType Type { get; set; }
    }

    public partial class StartPollData
    {
        [J("allowNothing", Required = R.Always)] public bool AllowNothing { get; set; }
        [J("duration", Required = R.Always)] public decimal Duration { get; set; }
        [J("options", Required = R.Always)] public List<StartPollOption> Options { get; set; }
    }

    public partial class StartPollOption
    {
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("logo", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Icon Logo { get; set; }
        [J("maxLength", Required = R.Always)] public decimal MaxLength { get; set; }
        [J("minLength", Required = R.Always)] public decimal MinLength { get; set; }
        [J("tooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string Tooltip { get; set; }
    }

    public partial class Icon
    {
        [J("data", Required = R.Always)] public string Data { get; set; }
        [J("type", Required = R.Always)] public IconType Type { get; set; }
    }

    public partial class ClientInitialize
    {
        [J("modifications", Required = R.Always)] public List<ClientInitializeModification> Modifications { get; set; }
        [J("options", Required = R.Always)] public Dictionary<string, OptionTypeValue> Options { get; set; }
        [J("type", Required = R.Always)] public ClientInitializeType Type { get; set; }
    }

    public partial class ClientInitializeModification
    {
        [J("name", Required = R.Always)] public string Name { get; set; }
        [J("options", Required = R.Always)] public Dictionary<string, OptionTypeValue> Options { get; set; }
    }

    public partial class ClientInitialized
    {
        [J("modifications", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<string> Modifications { get; set; }
        [J("type", Required = R.Always)] public ClientInitializedType Type { get; set; }
    }

    public partial class ClientRegister
    {
        [J("icon", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Icon Icon { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("modifications", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<ClientRegisterModification> Modifications { get; set; }
        [J("options", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<ClientRegisterOption> Options { get; set; }
        [J("type", Required = R.Always)] public ClientRegisterType Type { get; set; }
    }

    public partial class ClientRegisterModification
    {
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("icon", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Icon Icon { get; set; }
        [J("maxLength", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? MaxLength { get; set; }
        [J("name", Required = R.Always)] public string Name { get; set; }
        [J("options", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<ClientRegisterOption> Options { get; set; }
        [J("tooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string Tooltip { get; set; }
    }

    public partial class ClientRegisterOption
    {
        [J("default", Required = R.Always)] public OptionTypeValue Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("numType", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public NumType? NumType { get; set; }
        [J("validValues", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<ValidValue> ValidValues { get; set; }
    }

    public partial class ExecutionStarted
    {
        [J("modificationId", Required = R.Always)] public string ModificationId { get; set; }
        [J("type", Required = R.Always)] public ExecutionStartedType Type { get; set; }
    }

    public partial class ExecutionStartRequest
    {
        [J("length", Required = R.Always)] public decimal Length { get; set; }
        [J("modificationId", Required = R.Always)] public string ModificationId { get; set; }
        [J("type", Required = R.Always)] public ExecutionStartRequestType Type { get; set; }
    }

    public partial class ExecutionStopped
    {
        [J("modifications", Required = R.Always)] public List<string> Modifications { get; set; }
        [J("type", Required = R.Always)] public ExecutionStoppedType Type { get; set; }
    }

    public partial class ExecutionStopRequest
    {
        [J("modifications", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<string> Modifications { get; set; }
        [J("type", Required = R.Always)] public ExecutionStopRequestType Type { get; set; }
    }

    public partial class InfoMessage
    {
        [J("data", Required = R.Always)] public Dictionary<string, object> Data { get; set; }
        [J("type", Required = R.Always)] public InfoMessageType Type { get; set; }
    }

    public partial class InfoOpen
    {
        [J("data", Required = R.Always)] public InfoOpenData Data { get; set; }
        [J("type", Required = R.Always)] public InfoOpenType Type { get; set; }
    }

    public partial class InfoOpenData
    {
        [J("modifications", Required = R.Always)] public List<ModificationInfo> Modifications { get; set; }
        [J("nextPoll", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? NextPoll { get; set; }
        [J("pollActive", Required = R.Always)] public bool PollActive { get; set; }
    }

    public partial class ModificationInfo
    {
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("enabled", Required = R.Always)] public bool Enabled { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("logo", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Icon Logo { get; set; }
        [J("maxLength", Required = R.Always)] public decimal MaxLength { get; set; }
        [J("minLength", Required = R.Always)] public decimal MinLength { get; set; }
        [J("running", Required = R.Always)] public bool Running { get; set; }
        [J("tooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string Tooltip { get; set; }
    }

    public partial class InfoSubscribe
    {
        [J("type", Required = R.Always)] public InfoSubscribeType Type { get; set; }
    }

    public partial class InfoUnsubscribe
    {
        [J("type", Required = R.Always)] public InfoUnsubscribeType Type { get; set; }
    }

    public partial class NextPoll
    {
        [J("in", Required = R.Always)] public decimal In { get; set; }
        [J("type", Required = R.Always)] public NextPollType Type { get; set; }
    }

    public partial class NextPollCanceled
    {
        [J("type", Required = R.Always)] public NextPollCanceledType Type { get; set; }
    }

    public partial class ConfigAvailable
    {
        [J("channel", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Channel Channel { get; set; }
        [J("clients", Required = R.Always)] public List<ConfigAvailableClient> Clients { get; set; }
        [J("interfaceSettings", Required = R.Always)] public InterfaceSettings InterfaceSettings { get; set; }
        [J("pollSettings", Required = R.Always)] public PollSettings PollSettings { get; set; }
        [J("type", Required = R.Always)] public ConfigAvailableType Type { get; set; }
    }

    public partial class ConfigAvailableClient
    {
        [J("icon", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Icon Icon { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("modifications", Required = R.Always)] public List<ConfigAvailableModification> Modifications { get; set; }
        [J("options", Required = R.Always)] public List<ClientOption> Options { get; set; }
    }

    public partial class ConfigAvailableModification
    {
        [J("customDescription", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string CustomDescription { get; set; }
        [J("customMaxLength", Required = R.Always)] public decimal CustomMaxLength { get; set; }
        [J("customMinLength", Required = R.Always)] public decimal CustomMinLength { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("enabled", Required = R.Always)] public bool Enabled { get; set; }
        [J("icon", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Icon Icon { get; set; }
        [J("maxLength", Required = R.Always)] public decimal MaxLength { get; set; }
        [J("name", Required = R.Always)] public string Name { get; set; }
        [J("options", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<ClientOption> Options { get; set; }
        [J("tooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string Tooltip { get; set; }
    }

    public partial class ClientOption
    {
        [J("default", Required = R.Always)] public OptionTypeValue Default { get; set; }
        [J("description", Required = R.Always)] public string Description { get; set; }
        [J("id", Required = R.Always)] public string Id { get; set; }
        [J("value", Required = R.Always)] public OptionTypeValue Value { get; set; }
        [J("numType", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public NumType? NumType { get; set; }
        [J("validValues", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public List<ValidValue> ValidValues { get; set; }
    }

    public partial class InterfaceSettings
    {
        [J("durationTooltip", Required = R.Always)] public string DurationTooltip { get; set; }
        [J("modificationsHeader", Required = R.Always)] public string ModificationsHeader { get; set; }
        [J("nextPollText", Required = R.Always)] public string NextPollText { get; set; }
        [J("noModificationName", Required = R.Always)] public string NoModificationName { get; set; }
        [J("noModificationTooltip", Required = R.Always)] public string NoModificationTooltip { get; set; }
        [J("notRegisteredHeader", Required = R.Always)] public string NotRegisteredHeader { get; set; }
        [J("notRegisteredText", Required = R.Always)] public string NotRegisteredText { get; set; }
        [J("pluralityName", Required = R.Always)] public string PluralityName { get; set; }
        [J("pluralityTooltip", Required = R.Always)] public string PluralityTooltip { get; set; }
        [J("pollEndedText", Required = R.Always)] public string PollEndedText { get; set; }
        [J("secondsLeftText", Required = R.Always)] public string SecondsLeftText { get; set; }
        [J("subscribersOnlyHeader", Required = R.Always)] public string SubscribersOnlyHeader { get; set; }
        [J("subscribersOnlyText", Required = R.Always)] public string SubscribersOnlyText { get; set; }
        [J("votingModeHeader", Required = R.Always)] public string VotingModeHeader { get; set; }
        [J("weightedRandomName", Required = R.Always)] public string WeightedRandomName { get; set; }
        [J("weightedRandomTooltip", Required = R.Always)] public string WeightedRandomTooltip { get; set; }
        [J("winnerName", Required = R.Always)] public string WinnerName { get; set; }
        [J("winnerText", Required = R.Always)] public string WinnerText { get; set; }
        [J("winnerTextNoModification", Required = R.Always)] public string WinnerTextNoModification { get; set; }
    }

    public partial class PollSettings
    {
        [J("allowNoModification", Required = R.Always)] public bool AllowNoModification { get; set; }
        [J("duration", Required = R.Always)] public decimal Duration { get; set; }
        [J("ebsUrl", Required = R.Always)] public string EbsUrl { get; set; }
        [J("frequency", Required = R.Always)] public decimal Frequency { get; set; }
        [J("maxModifications", Required = R.Always)] public decimal MaxModifications { get; set; }
        [J("mode", Required = R.Always)] public VotingModeEnum Mode { get; set; }
        [J("participants", Required = R.Always)] public Participants Participants { get; set; }
    }

    public partial class ConfigChange
    {
        [J("clients", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Dictionary<string, ConfigChangeClient> Clients { get; set; }
        [J("interfaceSettings", Required = R.Always)] public PartialInterfaceSettings InterfaceSettings { get; set; }
        [J("pollSettings", Required = R.Always)] public PartialPollSettings PollSettings { get; set; }
        [J("type", Required = R.Always)] public ConfigChangeType Type { get; set; }
    }

    public partial class ConfigChangeClient
    {
        [J("modifications", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Dictionary<string, ConfigChangeModification> Modifications { get; set; }
        [J("options", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Dictionary<string, OptionTypeValue> Options { get; set; }
    }

    public partial class ConfigChangeModification
    {
        [J("description", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string Description { get; set; }
        [J("enabled", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("maxLength", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? MaxLength { get; set; }
        [J("minLength", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? MinLength { get; set; }
        [J("options", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Dictionary<string, OptionTypeValue> Options { get; set; }
        [J("tooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string Tooltip { get; set; }
    }

    public partial class PartialInterfaceSettings
    {
        [J("durationTooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string DurationTooltip { get; set; }
        [J("modificationsHeader", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string ModificationsHeader { get; set; }
        [J("nextPollText", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string NextPollText { get; set; }
        [J("noModificationName", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string NoModificationName { get; set; }
        [J("noModificationTooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string NoModificationTooltip { get; set; }
        [J("notRegisteredHeader", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string NotRegisteredHeader { get; set; }
        [J("notRegisteredText", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string NotRegisteredText { get; set; }
        [J("pluralityName", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string PluralityName { get; set; }
        [J("pluralityTooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string PluralityTooltip { get; set; }
        [J("pollEndedText", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string PollEndedText { get; set; }
        [J("secondsLeftText", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string SecondsLeftText { get; set; }
        [J("subscribersOnlyHeader", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string SubscribersOnlyHeader { get; set; }
        [J("subscribersOnlyText", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string SubscribersOnlyText { get; set; }
        [J("votingModeHeader", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string VotingModeHeader { get; set; }
        [J("weightedRandomName", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string WeightedRandomName { get; set; }
        [J("weightedRandomTooltip", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string WeightedRandomTooltip { get; set; }
        [J("winnerName", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string WinnerName { get; set; }
        [J("winnerText", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string WinnerText { get; set; }
        [J("winnerTextNoModification", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string WinnerTextNoModification { get; set; }
    }

    public partial class PartialPollSettings
    {
        [J("allowNoModification", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public bool? AllowNoModification { get; set; }
        [J("duration", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? Duration { get; set; }
        [J("ebsUrl", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string EbsUrl { get; set; }
        [J("frequency", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? Frequency { get; set; }
        [J("maxModifications", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? MaxModifications { get; set; }
        [J("mode", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public VotingModeEnum? Mode { get; set; }
        [J("participants", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public Participants? Participants { get; set; }
    }

    public partial class ConfigRegister
    {
        [J("type", Required = R.Always)] public ConfigRegisterType Type { get; set; }
    }

    public partial class ConfigStart
    {
        [J("type", Required = R.Always)] public ConfigStartType Type { get; set; }
    }

    public partial class ConfigStop
    {
        [J("type", Required = R.Always)] public ConfigStopType Type { get; set; }
    }

    public partial class ViewerAuthorization
    {
        [J("token", Required = R.Always)] public string Token { get; set; }
        [J("type", Required = R.Always)] public ViewerAuthorizationType Type { get; set; }
    }

    public partial class PollStopped
    {
        [J("type", Required = R.Always)] public PollStoppedType Type { get; set; }
    }

    public partial class ViewerRole
    {
        [J("data", Required = R.Always)] public DataEnum Data { get; set; }
        [J("type", Required = R.Always)] public ViewerRoleType Type { get; set; }
    }

    public partial class Vote
    {
        [J("data", Required = R.Always)] public VoteData Data { get; set; }
        [J("type", Required = R.Always)] public VoteType Type { get; set; }
    }

    public partial class VoteData
    {
        [J("duration", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public decimal? Duration { get; set; }
        [J("mode", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public DataMode? Mode { get; set; }
        [J("modification", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public string Modification { get; set; }
        [J("noModification", Required = R.DisallowNull, NullValueHandling = N.Ignore)] public bool? NoModification { get; set; } // Takes precedence over `modification`
    }

    public enum ResultVotingModeEnum { Plurality, WeightedRandom };

    public enum NumType { Double, Int };

    public enum AuthorizationType { Authorization };

    public enum AuthorizationSuccessType { AuthorizationSuccess };

    public enum OkType { Ok };

    public enum PollErrorType { PollError };

    public enum PollResultType { PollResult };

    public enum PollStartedType { PollStarted };

    public enum PollWinnerType { PollWinner };

    public enum VotingModeEnum { Plurality, Viewers, WeightedRandom };

    public enum Participants { All, LoggedIn, Subscribers };

    public enum SetConfigType { SetConfig };

    public enum IconType { Emoji, Png };

    public enum StartPollType { StartPoll };

    public enum ClientInitializeType { ClientInitialize };

    public enum ClientInitializedType { ClientInitialized };

    public enum ClientRegisterType { ClientRegister };

    public enum ExecutionStartedType { ExecutionStarted };

    public enum ExecutionStartRequestType { ExecutionStartRequest };

    public enum ExecutionStoppedType { ExecutionStopped };

    public enum ExecutionStopRequestType { ExecutionStopRequest };

    public enum InfoMessageType { InfoMessage };

    public enum InfoOpenType { InfoOpen };

    public enum InfoSubscribeType { InfoSubscribe };

    public enum InfoUnsubscribeType { InfoUnsubscribe };

    public enum NextPollType { NextPoll };

    public enum NextPollCanceledType { NextPollCanceled };

    public enum ConfigAvailableType { ConfigAvailable };

    public enum ConfigChangeType { ConfigChange };

    public enum ConfigRegisterType { ConfigRegister };

    public enum ConfigStartType { ConfigStart };

    public enum ConfigStopType { ConfigStop };

    public enum ViewerAuthorizationType { ViewerAuthorization };

    public enum PollStoppedType { PollStopped };

    public enum DataEnum { Anonymous, Broadcaster, Linked, Moderator, Subscriber, Unlinked };

    public enum ViewerRoleType { Role };

    public enum DataMode { Plurality, Reset, WeightedRandom };

    public enum VoteType { Vote };

    public partial struct OptionTypeValue
    {
        public bool? Bool;
        public decimal? Double;
        public string String;

        public static implicit operator OptionTypeValue(bool Bool) => new OptionTypeValue { Bool = Bool };
        public static implicit operator OptionTypeValue(decimal Double) => new OptionTypeValue { Double = Double };
        public static implicit operator OptionTypeValue(string String) => new OptionTypeValue { String = String };
    }

    public partial struct ValidValue
    {
        public decimal? Double;
        public string String;

        public static implicit operator ValidValue(decimal Double) => new ValidValue { Double = Double };
        public static implicit operator ValidValue(string String) => new ValidValue { String = String };
    }

    public partial class ClientOption
    {
        public static ClientOption FromJson(string json) => JsonConvert.DeserializeObject<ClientOption>(json, API.Converter.Settings);
    }

    public partial class ClientRegisterOption
    {
        public static ClientRegisterOption FromJson(string json) => JsonConvert.DeserializeObject<ClientRegisterOption>(json, API.Converter.Settings);
    }

    public class OptionType
    {
        public static object FromJson(string json) => JsonConvert.DeserializeObject<object>(json, API.Converter.Settings);
    }

    public class OptionValues
    {
        public static Dictionary<string, OptionTypeValue> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, OptionTypeValue>>(json, API.Converter.Settings);
    }

    public class PollParticipants
    {
        public static Participants FromJson(string json) => JsonConvert.DeserializeObject<Participants>(json, API.Converter.Settings);
    }

    public class ResultVotingMode
    {
        public static ResultVotingModeEnum FromJson(string json) => JsonConvert.DeserializeObject<ResultVotingModeEnum>(json, API.Converter.Settings);
    }

    public class VotingMode
    {
        public static VotingModeEnum FromJson(string json) => JsonConvert.DeserializeObject<VotingModeEnum>(json, API.Converter.Settings);
    }

    public partial class Channel
    {
        public static Channel FromJson(string json) => JsonConvert.DeserializeObject<Channel>(json, API.Converter.Settings);
    }

    public partial class Icon
    {
        public static Icon FromJson(string json) => JsonConvert.DeserializeObject<Icon>(json, API.Converter.Settings);
    }

    public partial class RegisterOption
    {
        public static RegisterOption FromJson(string json) => JsonConvert.DeserializeObject<RegisterOption>(json, API.Converter.Settings);
    }

    public partial class NumberRegisterOption
    {
        public static NumberRegisterOption FromJson(string json) => JsonConvert.DeserializeObject<NumberRegisterOption>(json, API.Converter.Settings);
    }

    public partial class BoolRegisterOption
    {
        public static BoolRegisterOption FromJson(string json) => JsonConvert.DeserializeObject<BoolRegisterOption>(json, API.Converter.Settings);
    }

    public partial class StringRegisterOption
    {
        public static StringRegisterOption FromJson(string json) => JsonConvert.DeserializeObject<StringRegisterOption>(json, API.Converter.Settings);
    }

    public partial class BoolOption
    {
        public static BoolOption FromJson(string json) => JsonConvert.DeserializeObject<BoolOption>(json, API.Converter.Settings);
    }

    public partial class NumberOption
    {
        public static NumberOption FromJson(string json) => JsonConvert.DeserializeObject<NumberOption>(json, API.Converter.Settings);
    }

    public partial class StringOption
    {
        public static StringOption FromJson(string json) => JsonConvert.DeserializeObject<StringOption>(json, API.Converter.Settings);
    }

    public partial class ModificationInfo
    {
        public static ModificationInfo FromJson(string json) => JsonConvert.DeserializeObject<ModificationInfo>(json, API.Converter.Settings);
    }

    public partial class Authorization
    {
        public static Authorization FromJson(string json) => JsonConvert.DeserializeObject<Authorization>(json, API.Converter.Settings);
    }

    public partial class AuthorizationSuccess
    {
        public static AuthorizationSuccess FromJson(string json) => JsonConvert.DeserializeObject<AuthorizationSuccess>(json, API.Converter.Settings);
    }

    public partial class Ok
    {
        public static Ok FromJson(string json) => JsonConvert.DeserializeObject<Ok>(json, API.Converter.Settings);
    }

    public partial class PollError
    {
        public static PollError FromJson(string json) => JsonConvert.DeserializeObject<PollError>(json, API.Converter.Settings);
    }

    public partial class PollResult
    {
        public static PollResult FromJson(string json) => JsonConvert.DeserializeObject<PollResult>(json, API.Converter.Settings);
    }

    public partial class PollStarted
    {
        public static PollStarted FromJson(string json) => JsonConvert.DeserializeObject<PollStarted>(json, API.Converter.Settings);
    }

    public partial class PollWinner
    {
        public static PollWinner FromJson(string json) => JsonConvert.DeserializeObject<PollWinner>(json, API.Converter.Settings);
    }

    public partial class SetConfig
    {
        public static SetConfig FromJson(string json) => JsonConvert.DeserializeObject<SetConfig>(json, API.Converter.Settings);
    }

    public partial class SetConfigData
    {
        public static SetConfigData FromJson(string json) => JsonConvert.DeserializeObject<SetConfigData>(json, API.Converter.Settings);
    }

    public partial class StartPoll
    {
        public static StartPoll FromJson(string json) => JsonConvert.DeserializeObject<StartPoll>(json, API.Converter.Settings);
    }

    public partial class StartPollOption
    {
        public static StartPollOption FromJson(string json) => JsonConvert.DeserializeObject<StartPollOption>(json, API.Converter.Settings);
    }

    public partial class ClientInitialize
    {
        public static ClientInitialize FromJson(string json) => JsonConvert.DeserializeObject<ClientInitialize>(json, API.Converter.Settings);
    }

    public partial class ClientInitializeModification
    {
        public static ClientInitializeModification FromJson(string json) => JsonConvert.DeserializeObject<ClientInitializeModification>(json, API.Converter.Settings);
    }

    public partial class ClientInitialized
    {
        public static ClientInitialized FromJson(string json) => JsonConvert.DeserializeObject<ClientInitialized>(json, API.Converter.Settings);
    }

    public partial class ClientRegister
    {
        public static ClientRegister FromJson(string json) => JsonConvert.DeserializeObject<ClientRegister>(json, API.Converter.Settings);
    }

    public partial class ClientRegisterModification
    {
        public static ClientRegisterModification FromJson(string json) => JsonConvert.DeserializeObject<ClientRegisterModification>(json, API.Converter.Settings);
    }

    public partial class ExecutionStarted
    {
        public static ExecutionStarted FromJson(string json) => JsonConvert.DeserializeObject<ExecutionStarted>(json, API.Converter.Settings);
    }

    public partial class ExecutionStartRequest
    {
        public static ExecutionStartRequest FromJson(string json) => JsonConvert.DeserializeObject<ExecutionStartRequest>(json, API.Converter.Settings);
    }

    public partial class ExecutionStopped
    {
        public static ExecutionStopped FromJson(string json) => JsonConvert.DeserializeObject<ExecutionStopped>(json, API.Converter.Settings);
    }

    public partial class ExecutionStopRequest
    {
        public static ExecutionStopRequest FromJson(string json) => JsonConvert.DeserializeObject<ExecutionStopRequest>(json, API.Converter.Settings);
    }

    public partial class InfoMessage
    {
        public static InfoMessage FromJson(string json) => JsonConvert.DeserializeObject<InfoMessage>(json, API.Converter.Settings);
    }

    public partial class InfoOpen
    {
        public static InfoOpen FromJson(string json) => JsonConvert.DeserializeObject<InfoOpen>(json, API.Converter.Settings);
    }

    public partial class InfoOpenData
    {
        public static InfoOpenData FromJson(string json) => JsonConvert.DeserializeObject<InfoOpenData>(json, API.Converter.Settings);
    }

    public partial class InfoSubscribe
    {
        public static InfoSubscribe FromJson(string json) => JsonConvert.DeserializeObject<InfoSubscribe>(json, API.Converter.Settings);
    }

    public partial class InfoUnsubscribe
    {
        public static InfoUnsubscribe FromJson(string json) => JsonConvert.DeserializeObject<InfoUnsubscribe>(json, API.Converter.Settings);
    }

    public partial class NextPoll
    {
        public static NextPoll FromJson(string json) => JsonConvert.DeserializeObject<NextPoll>(json, API.Converter.Settings);
    }

    public partial class NextPollCanceled
    {
        public static NextPollCanceled FromJson(string json) => JsonConvert.DeserializeObject<NextPollCanceled>(json, API.Converter.Settings);
    }

    public partial class ConfigAvailable
    {
        public static ConfigAvailable FromJson(string json) => JsonConvert.DeserializeObject<ConfigAvailable>(json, API.Converter.Settings);
    }

    public partial class ConfigAvailableClient
    {
        public static ConfigAvailableClient FromJson(string json) => JsonConvert.DeserializeObject<ConfigAvailableClient>(json, API.Converter.Settings);
    }

    public partial class ConfigAvailableModification
    {
        public static ConfigAvailableModification FromJson(string json) => JsonConvert.DeserializeObject<ConfigAvailableModification>(json, API.Converter.Settings);
    }

    public partial class ConfigChange
    {
        public static ConfigChange FromJson(string json) => JsonConvert.DeserializeObject<ConfigChange>(json, API.Converter.Settings);
    }

    public partial class ConfigChangeClient
    {
        public static ConfigChangeClient FromJson(string json) => JsonConvert.DeserializeObject<ConfigChangeClient>(json, API.Converter.Settings);
    }

    public partial class ConfigChangeModification
    {
        public static ConfigChangeModification FromJson(string json) => JsonConvert.DeserializeObject<ConfigChangeModification>(json, API.Converter.Settings);
    }

    public class ConfigChangeOptions
    {
        public static Dictionary<string, OptionTypeValue> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, OptionTypeValue>>(json, API.Converter.Settings);
    }

    public partial class ConfigRegister
    {
        public static ConfigRegister FromJson(string json) => JsonConvert.DeserializeObject<ConfigRegister>(json, API.Converter.Settings);
    }

    public partial class ConfigStart
    {
        public static ConfigStart FromJson(string json) => JsonConvert.DeserializeObject<ConfigStart>(json, API.Converter.Settings);
    }

    public partial class ConfigStop
    {
        public static ConfigStop FromJson(string json) => JsonConvert.DeserializeObject<ConfigStop>(json, API.Converter.Settings);
    }

    public partial class InterfaceSettings
    {
        public static InterfaceSettings FromJson(string json) => JsonConvert.DeserializeObject<InterfaceSettings>(json, API.Converter.Settings);
    }

    public partial class PollSettings
    {
        public static PollSettings FromJson(string json) => JsonConvert.DeserializeObject<PollSettings>(json, API.Converter.Settings);
    }

    public partial class ViewerAuthorization
    {
        public static ViewerAuthorization FromJson(string json) => JsonConvert.DeserializeObject<ViewerAuthorization>(json, API.Converter.Settings);
    }

    public partial class PollStopped
    {
        public static PollStopped FromJson(string json) => JsonConvert.DeserializeObject<PollStopped>(json, API.Converter.Settings);
    }

    public partial class ViewerRole
    {
        public static ViewerRole FromJson(string json) => JsonConvert.DeserializeObject<ViewerRole>(json, API.Converter.Settings);
    }

    public partial class Vote
    {
        public static Vote FromJson(string json) => JsonConvert.DeserializeObject<Vote>(json, API.Converter.Settings);
    }

    public partial class PluralityNumberWeightedRandomNumber
    {
        public static PluralityNumberWeightedRandomNumber FromJson(string json) => JsonConvert.DeserializeObject<PluralityNumberWeightedRandomNumber>(json, API.Converter.Settings);
    }

    public class RecordStringAny
    {
        public static Dictionary<string, object> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, object>>(json, API.Converter.Settings);
    }

    public partial class PartialInterfaceSettings
    {
        public static PartialInterfaceSettings FromJson(string json) => JsonConvert.DeserializeObject<PartialInterfaceSettings>(json, API.Converter.Settings);
    }

    public partial class PartialPollSettings
    {
        public static PartialPollSettings FromJson(string json) => JsonConvert.DeserializeObject<PartialPollSettings>(json, API.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ClientOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ClientRegisterOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this object self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Dictionary<string, OptionTypeValue> self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Participants self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ResultVotingModeEnum self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this VotingModeEnum self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Channel self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Icon self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this RegisterOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this NumberRegisterOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this BoolRegisterOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this StringRegisterOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this BoolOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this NumberOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this StringOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ModificationInfo self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Authorization self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this AuthorizationSuccess self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Ok self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PollError self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PollResult self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PollStarted self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PollWinner self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this SetConfig self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this SetConfigData self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this StartPoll self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this StartPollOption self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ClientInitialize self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ClientInitializeModification self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ClientInitialized self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ClientRegister self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ClientRegisterModification self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ExecutionStarted self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ExecutionStartRequest self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ExecutionStopped self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ExecutionStopRequest self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this InfoMessage self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this InfoOpen self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this InfoOpenData self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this InfoSubscribe self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this InfoUnsubscribe self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this NextPoll self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this NextPollCanceled self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigAvailable self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigAvailableClient self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigAvailableModification self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigChange self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigChangeClient self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigChangeModification self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigRegister self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigStart self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ConfigStop self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this InterfaceSettings self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PollSettings self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ViewerAuthorization self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PollStopped self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this ViewerRole self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Vote self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PluralityNumberWeightedRandomNumber self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this Dictionary<string, object> self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PartialInterfaceSettings self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
        public static string ToJson(this PartialPollSettings self) => JsonConvert.SerializeObject(self, API.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OptionTypeValueConverter.Singleton,
                NumTypeConverter.Singleton,
                ValidValueConverter.Singleton,
                ParticipantsConverter.Singleton,
                ResultVotingModeEnumConverter.Singleton,
                VotingModeEnumConverter.Singleton,
                IconTypeConverter.Singleton,
                AuthorizationTypeConverter.Singleton,
                AuthorizationSuccessTypeConverter.Singleton,
                OkTypeConverter.Singleton,
                PollErrorTypeConverter.Singleton,
                PollResultTypeConverter.Singleton,
                PollStartedTypeConverter.Singleton,
                PollWinnerTypeConverter.Singleton,
                SetConfigTypeConverter.Singleton,
                StartPollTypeConverter.Singleton,
                ClientInitializeTypeConverter.Singleton,
                ClientInitializedTypeConverter.Singleton,
                ClientRegisterTypeConverter.Singleton,
                ExecutionStartedTypeConverter.Singleton,
                ExecutionStartRequestTypeConverter.Singleton,
                ExecutionStoppedTypeConverter.Singleton,
                ExecutionStopRequestTypeConverter.Singleton,
                InfoMessageTypeConverter.Singleton,
                InfoOpenTypeConverter.Singleton,
                InfoSubscribeTypeConverter.Singleton,
                InfoUnsubscribeTypeConverter.Singleton,
                NextPollTypeConverter.Singleton,
                NextPollCanceledTypeConverter.Singleton,
                ConfigAvailableTypeConverter.Singleton,
                ConfigChangeTypeConverter.Singleton,
                ConfigRegisterTypeConverter.Singleton,
                ConfigStartTypeConverter.Singleton,
                ConfigStopTypeConverter.Singleton,
                ViewerAuthorizationTypeConverter.Singleton,
                PollStoppedTypeConverter.Singleton,
                DataEnumConverter.Singleton,
                ViewerRoleTypeConverter.Singleton,
                DataModeConverter.Singleton,
                VoteTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class OptionTypeValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OptionTypeValue) || t == typeof(OptionTypeValue?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<decimal>(reader);
                    return new OptionTypeValue { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new OptionTypeValue { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new OptionTypeValue { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type OptionTypeValue");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (OptionTypeValue)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type OptionTypeValue");
        }

        public static readonly OptionTypeValueConverter Singleton = new OptionTypeValueConverter();
    }

    internal class NumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NumType) || t == typeof(NumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "double":
                    return NumType.Double;
                case "int":
                    return NumType.Int;
            }
            throw new Exception("Cannot unmarshal type NumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NumType)untypedValue;
            switch (value)
            {
                case NumType.Double:
                    serializer.Serialize(writer, "double");
                    return;
                case NumType.Int:
                    serializer.Serialize(writer, "int");
                    return;
            }
            throw new Exception("Cannot marshal type NumType");
        }

        public static readonly NumTypeConverter Singleton = new NumTypeConverter();
    }

    internal class ValidValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValidValue) || t == typeof(ValidValue?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<decimal>(reader);
                    return new ValidValue { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ValidValue { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type ValidValue");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValidValue)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type ValidValue");
        }

        public static readonly ValidValueConverter Singleton = new ValidValueConverter();
    }

    internal class ParticipantsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Participants) || t == typeof(Participants?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "all":
                    return Participants.All;
                case "logged_in":
                    return Participants.LoggedIn;
                case "subscribers":
                    return Participants.Subscribers;
            }
            throw new Exception("Cannot unmarshal type Participants");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Participants)untypedValue;
            switch (value)
            {
                case Participants.All:
                    serializer.Serialize(writer, "all");
                    return;
                case Participants.LoggedIn:
                    serializer.Serialize(writer, "logged_in");
                    return;
                case Participants.Subscribers:
                    serializer.Serialize(writer, "subscribers");
                    return;
            }
            throw new Exception("Cannot marshal type Participants");
        }

        public static readonly ParticipantsConverter Singleton = new ParticipantsConverter();
    }

    internal class ResultVotingModeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResultVotingModeEnum) || t == typeof(ResultVotingModeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "plurality":
                    return ResultVotingModeEnum.Plurality;
                case "weighted_random":
                    return ResultVotingModeEnum.WeightedRandom;
            }
            throw new Exception("Cannot unmarshal type ResultVotingModeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ResultVotingModeEnum)untypedValue;
            switch (value)
            {
                case ResultVotingModeEnum.Plurality:
                    serializer.Serialize(writer, "plurality");
                    return;
                case ResultVotingModeEnum.WeightedRandom:
                    serializer.Serialize(writer, "weighted_random");
                    return;
            }
            throw new Exception("Cannot marshal type ResultVotingModeEnum");
        }

        public static readonly ResultVotingModeEnumConverter Singleton = new ResultVotingModeEnumConverter();
    }

    internal class VotingModeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VotingModeEnum) || t == typeof(VotingModeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "plurality":
                    return VotingModeEnum.Plurality;
                case "viewers":
                    return VotingModeEnum.Viewers;
                case "weighted_random":
                    return VotingModeEnum.WeightedRandom;
            }
            throw new Exception("Cannot unmarshal type VotingModeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VotingModeEnum)untypedValue;
            switch (value)
            {
                case VotingModeEnum.Plurality:
                    serializer.Serialize(writer, "plurality");
                    return;
                case VotingModeEnum.Viewers:
                    serializer.Serialize(writer, "viewers");
                    return;
                case VotingModeEnum.WeightedRandom:
                    serializer.Serialize(writer, "weighted_random");
                    return;
            }
            throw new Exception("Cannot marshal type VotingModeEnum");
        }

        public static readonly VotingModeEnumConverter Singleton = new VotingModeEnumConverter();
    }

    internal class IconTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IconType) || t == typeof(IconType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "emoji":
                    return IconType.Emoji;
                case "png":
                    return IconType.Png;
            }
            throw new Exception("Cannot unmarshal type IconType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IconType)untypedValue;
            switch (value)
            {
                case IconType.Emoji:
                    serializer.Serialize(writer, "emoji");
                    return;
                case IconType.Png:
                    serializer.Serialize(writer, "png");
                    return;
            }
            throw new Exception("Cannot marshal type IconType");
        }

        public static readonly IconTypeConverter Singleton = new IconTypeConverter();
    }

    internal class AuthorizationTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AuthorizationType) || t == typeof(AuthorizationType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Authorization")
            {
                return AuthorizationType.Authorization;
            }
            throw new Exception("Cannot unmarshal type AuthorizationType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AuthorizationType)untypedValue;
            if (value == AuthorizationType.Authorization)
            {
                serializer.Serialize(writer, "Authorization");
                return;
            }
            throw new Exception("Cannot marshal type AuthorizationType");
        }

        public static readonly AuthorizationTypeConverter Singleton = new AuthorizationTypeConverter();
    }

    internal class AuthorizationSuccessTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AuthorizationSuccessType) || t == typeof(AuthorizationSuccessType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Authorization.Success")
            {
                return AuthorizationSuccessType.AuthorizationSuccess;
            }
            throw new Exception("Cannot unmarshal type AuthorizationSuccessType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AuthorizationSuccessType)untypedValue;
            if (value == AuthorizationSuccessType.AuthorizationSuccess)
            {
                serializer.Serialize(writer, "Authorization.Success");
                return;
            }
            throw new Exception("Cannot marshal type AuthorizationSuccessType");
        }

        public static readonly AuthorizationSuccessTypeConverter Singleton = new AuthorizationSuccessTypeConverter();
    }

    internal class OkTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OkType) || t == typeof(OkType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "OK")
            {
                return OkType.Ok;
            }
            throw new Exception("Cannot unmarshal type OkType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OkType)untypedValue;
            if (value == OkType.Ok)
            {
                serializer.Serialize(writer, "OK");
                return;
            }
            throw new Exception("Cannot marshal type OkType");
        }

        public static readonly OkTypeConverter Singleton = new OkTypeConverter();
    }

    internal class PollErrorTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PollErrorType) || t == typeof(PollErrorType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "PollError")
            {
                return PollErrorType.PollError;
            }
            throw new Exception("Cannot unmarshal type PollErrorType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PollErrorType)untypedValue;
            if (value == PollErrorType.PollError)
            {
                serializer.Serialize(writer, "PollError");
                return;
            }
            throw new Exception("Cannot marshal type PollErrorType");
        }

        public static readonly PollErrorTypeConverter Singleton = new PollErrorTypeConverter();
    }

    internal class PollResultTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PollResultType) || t == typeof(PollResultType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "PollResult")
            {
                return PollResultType.PollResult;
            }
            throw new Exception("Cannot unmarshal type PollResultType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PollResultType)untypedValue;
            if (value == PollResultType.PollResult)
            {
                serializer.Serialize(writer, "PollResult");
                return;
            }
            throw new Exception("Cannot marshal type PollResultType");
        }

        public static readonly PollResultTypeConverter Singleton = new PollResultTypeConverter();
    }

    internal class PollStartedTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PollStartedType) || t == typeof(PollStartedType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "PollStarted")
            {
                return PollStartedType.PollStarted;
            }
            throw new Exception("Cannot unmarshal type PollStartedType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PollStartedType)untypedValue;
            if (value == PollStartedType.PollStarted)
            {
                serializer.Serialize(writer, "PollStarted");
                return;
            }
            throw new Exception("Cannot marshal type PollStartedType");
        }

        public static readonly PollStartedTypeConverter Singleton = new PollStartedTypeConverter();
    }

    internal class PollWinnerTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PollWinnerType) || t == typeof(PollWinnerType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "PollWinner")
            {
                return PollWinnerType.PollWinner;
            }
            throw new Exception("Cannot unmarshal type PollWinnerType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PollWinnerType)untypedValue;
            if (value == PollWinnerType.PollWinner)
            {
                serializer.Serialize(writer, "PollWinner");
                return;
            }
            throw new Exception("Cannot marshal type PollWinnerType");
        }

        public static readonly PollWinnerTypeConverter Singleton = new PollWinnerTypeConverter();
    }

    internal class SetConfigTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SetConfigType) || t == typeof(SetConfigType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "SetConfig")
            {
                return SetConfigType.SetConfig;
            }
            throw new Exception("Cannot unmarshal type SetConfigType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SetConfigType)untypedValue;
            if (value == SetConfigType.SetConfig)
            {
                serializer.Serialize(writer, "SetConfig");
                return;
            }
            throw new Exception("Cannot marshal type SetConfigType");
        }

        public static readonly SetConfigTypeConverter Singleton = new SetConfigTypeConverter();
    }

    internal class StartPollTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StartPollType) || t == typeof(StartPollType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "StartPoll")
            {
                return StartPollType.StartPoll;
            }
            throw new Exception("Cannot unmarshal type StartPollType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StartPollType)untypedValue;
            if (value == StartPollType.StartPoll)
            {
                serializer.Serialize(writer, "StartPoll");
                return;
            }
            throw new Exception("Cannot marshal type StartPollType");
        }

        public static readonly StartPollTypeConverter Singleton = new StartPollTypeConverter();
    }

    internal class ClientInitializeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ClientInitializeType) || t == typeof(ClientInitializeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Client.Initialize")
            {
                return ClientInitializeType.ClientInitialize;
            }
            throw new Exception("Cannot unmarshal type ClientInitializeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ClientInitializeType)untypedValue;
            if (value == ClientInitializeType.ClientInitialize)
            {
                serializer.Serialize(writer, "Client.Initialize");
                return;
            }
            throw new Exception("Cannot marshal type ClientInitializeType");
        }

        public static readonly ClientInitializeTypeConverter Singleton = new ClientInitializeTypeConverter();
    }

    internal class ClientInitializedTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ClientInitializedType) || t == typeof(ClientInitializedType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Client.Initialized")
            {
                return ClientInitializedType.ClientInitialized;
            }
            throw new Exception("Cannot unmarshal type ClientInitializedType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ClientInitializedType)untypedValue;
            if (value == ClientInitializedType.ClientInitialized)
            {
                serializer.Serialize(writer, "Client.Initialized");
                return;
            }
            throw new Exception("Cannot marshal type ClientInitializedType");
        }

        public static readonly ClientInitializedTypeConverter Singleton = new ClientInitializedTypeConverter();
    }

    internal class ClientRegisterTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ClientRegisterType) || t == typeof(ClientRegisterType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Client.Register")
            {
                return ClientRegisterType.ClientRegister;
            }
            throw new Exception("Cannot unmarshal type ClientRegisterType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ClientRegisterType)untypedValue;
            if (value == ClientRegisterType.ClientRegister)
            {
                serializer.Serialize(writer, "Client.Register");
                return;
            }
            throw new Exception("Cannot marshal type ClientRegisterType");
        }

        public static readonly ClientRegisterTypeConverter Singleton = new ClientRegisterTypeConverter();
    }

    internal class ExecutionStartedTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExecutionStartedType) || t == typeof(ExecutionStartedType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Execution.Started")
            {
                return ExecutionStartedType.ExecutionStarted;
            }
            throw new Exception("Cannot unmarshal type ExecutionStartedType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExecutionStartedType)untypedValue;
            if (value == ExecutionStartedType.ExecutionStarted)
            {
                serializer.Serialize(writer, "Execution.Started");
                return;
            }
            throw new Exception("Cannot marshal type ExecutionStartedType");
        }

        public static readonly ExecutionStartedTypeConverter Singleton = new ExecutionStartedTypeConverter();
    }

    internal class ExecutionStartRequestTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExecutionStartRequestType) || t == typeof(ExecutionStartRequestType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Execution.StartRequest")
            {
                return ExecutionStartRequestType.ExecutionStartRequest;
            }
            throw new Exception("Cannot unmarshal type ExecutionStartRequestType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExecutionStartRequestType)untypedValue;
            if (value == ExecutionStartRequestType.ExecutionStartRequest)
            {
                serializer.Serialize(writer, "Execution.StartRequest");
                return;
            }
            throw new Exception("Cannot marshal type ExecutionStartRequestType");
        }

        public static readonly ExecutionStartRequestTypeConverter Singleton = new ExecutionStartRequestTypeConverter();
    }

    internal class ExecutionStoppedTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExecutionStoppedType) || t == typeof(ExecutionStoppedType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Execution.Stopped")
            {
                return ExecutionStoppedType.ExecutionStopped;
            }
            throw new Exception("Cannot unmarshal type ExecutionStoppedType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExecutionStoppedType)untypedValue;
            if (value == ExecutionStoppedType.ExecutionStopped)
            {
                serializer.Serialize(writer, "Execution.Stopped");
                return;
            }
            throw new Exception("Cannot marshal type ExecutionStoppedType");
        }

        public static readonly ExecutionStoppedTypeConverter Singleton = new ExecutionStoppedTypeConverter();
    }

    internal class ExecutionStopRequestTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExecutionStopRequestType) || t == typeof(ExecutionStopRequestType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Execution.StopRequest")
            {
                return ExecutionStopRequestType.ExecutionStopRequest;
            }
            throw new Exception("Cannot unmarshal type ExecutionStopRequestType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExecutionStopRequestType)untypedValue;
            if (value == ExecutionStopRequestType.ExecutionStopRequest)
            {
                serializer.Serialize(writer, "Execution.StopRequest");
                return;
            }
            throw new Exception("Cannot marshal type ExecutionStopRequestType");
        }

        public static readonly ExecutionStopRequestTypeConverter Singleton = new ExecutionStopRequestTypeConverter();
    }

    internal class InfoMessageTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InfoMessageType) || t == typeof(InfoMessageType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Info.Message")
            {
                return InfoMessageType.InfoMessage;
            }
            throw new Exception("Cannot unmarshal type InfoMessageType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InfoMessageType)untypedValue;
            if (value == InfoMessageType.InfoMessage)
            {
                serializer.Serialize(writer, "Info.Message");
                return;
            }
            throw new Exception("Cannot marshal type InfoMessageType");
        }

        public static readonly InfoMessageTypeConverter Singleton = new InfoMessageTypeConverter();
    }

    internal class InfoOpenTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InfoOpenType) || t == typeof(InfoOpenType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Info.Open")
            {
                return InfoOpenType.InfoOpen;
            }
            throw new Exception("Cannot unmarshal type InfoOpenType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InfoOpenType)untypedValue;
            if (value == InfoOpenType.InfoOpen)
            {
                serializer.Serialize(writer, "Info.Open");
                return;
            }
            throw new Exception("Cannot marshal type InfoOpenType");
        }

        public static readonly InfoOpenTypeConverter Singleton = new InfoOpenTypeConverter();
    }

    internal class InfoSubscribeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InfoSubscribeType) || t == typeof(InfoSubscribeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Info.Subscribe")
            {
                return InfoSubscribeType.InfoSubscribe;
            }
            throw new Exception("Cannot unmarshal type InfoSubscribeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InfoSubscribeType)untypedValue;
            if (value == InfoSubscribeType.InfoSubscribe)
            {
                serializer.Serialize(writer, "Info.Subscribe");
                return;
            }
            throw new Exception("Cannot marshal type InfoSubscribeType");
        }

        public static readonly InfoSubscribeTypeConverter Singleton = new InfoSubscribeTypeConverter();
    }

    internal class InfoUnsubscribeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InfoUnsubscribeType) || t == typeof(InfoUnsubscribeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Info.Unsubscribe")
            {
                return InfoUnsubscribeType.InfoUnsubscribe;
            }
            throw new Exception("Cannot unmarshal type InfoUnsubscribeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InfoUnsubscribeType)untypedValue;
            if (value == InfoUnsubscribeType.InfoUnsubscribe)
            {
                serializer.Serialize(writer, "Info.Unsubscribe");
                return;
            }
            throw new Exception("Cannot marshal type InfoUnsubscribeType");
        }

        public static readonly InfoUnsubscribeTypeConverter Singleton = new InfoUnsubscribeTypeConverter();
    }

    internal class NextPollTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NextPollType) || t == typeof(NextPollType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "NextPoll")
            {
                return NextPollType.NextPoll;
            }
            throw new Exception("Cannot unmarshal type NextPollType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NextPollType)untypedValue;
            if (value == NextPollType.NextPoll)
            {
                serializer.Serialize(writer, "NextPoll");
                return;
            }
            throw new Exception("Cannot marshal type NextPollType");
        }

        public static readonly NextPollTypeConverter Singleton = new NextPollTypeConverter();
    }

    internal class NextPollCanceledTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NextPollCanceledType) || t == typeof(NextPollCanceledType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "NextPollCanceled")
            {
                return NextPollCanceledType.NextPollCanceled;
            }
            throw new Exception("Cannot unmarshal type NextPollCanceledType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NextPollCanceledType)untypedValue;
            if (value == NextPollCanceledType.NextPollCanceled)
            {
                serializer.Serialize(writer, "NextPollCanceled");
                return;
            }
            throw new Exception("Cannot marshal type NextPollCanceledType");
        }

        public static readonly NextPollCanceledTypeConverter Singleton = new NextPollCanceledTypeConverter();
    }

    internal class ConfigAvailableTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConfigAvailableType) || t == typeof(ConfigAvailableType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Config.Available")
            {
                return ConfigAvailableType.ConfigAvailable;
            }
            throw new Exception("Cannot unmarshal type ConfigAvailableType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConfigAvailableType)untypedValue;
            if (value == ConfigAvailableType.ConfigAvailable)
            {
                serializer.Serialize(writer, "Config.Available");
                return;
            }
            throw new Exception("Cannot marshal type ConfigAvailableType");
        }

        public static readonly ConfigAvailableTypeConverter Singleton = new ConfigAvailableTypeConverter();
    }

    internal class ConfigChangeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConfigChangeType) || t == typeof(ConfigChangeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Config.Change")
            {
                return ConfigChangeType.ConfigChange;
            }
            throw new Exception("Cannot unmarshal type ConfigChangeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConfigChangeType)untypedValue;
            if (value == ConfigChangeType.ConfigChange)
            {
                serializer.Serialize(writer, "Config.Change");
                return;
            }
            throw new Exception("Cannot marshal type ConfigChangeType");
        }

        public static readonly ConfigChangeTypeConverter Singleton = new ConfigChangeTypeConverter();
    }

    internal class ConfigRegisterTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConfigRegisterType) || t == typeof(ConfigRegisterType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Config.Register")
            {
                return ConfigRegisterType.ConfigRegister;
            }
            throw new Exception("Cannot unmarshal type ConfigRegisterType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConfigRegisterType)untypedValue;
            if (value == ConfigRegisterType.ConfigRegister)
            {
                serializer.Serialize(writer, "Config.Register");
                return;
            }
            throw new Exception("Cannot marshal type ConfigRegisterType");
        }

        public static readonly ConfigRegisterTypeConverter Singleton = new ConfigRegisterTypeConverter();
    }

    internal class ConfigStartTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConfigStartType) || t == typeof(ConfigStartType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Config.Start")
            {
                return ConfigStartType.ConfigStart;
            }
            throw new Exception("Cannot unmarshal type ConfigStartType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConfigStartType)untypedValue;
            if (value == ConfigStartType.ConfigStart)
            {
                serializer.Serialize(writer, "Config.Start");
                return;
            }
            throw new Exception("Cannot marshal type ConfigStartType");
        }

        public static readonly ConfigStartTypeConverter Singleton = new ConfigStartTypeConverter();
    }

    internal class ConfigStopTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConfigStopType) || t == typeof(ConfigStopType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Config.Stop")
            {
                return ConfigStopType.ConfigStop;
            }
            throw new Exception("Cannot unmarshal type ConfigStopType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConfigStopType)untypedValue;
            if (value == ConfigStopType.ConfigStop)
            {
                serializer.Serialize(writer, "Config.Stop");
                return;
            }
            throw new Exception("Cannot marshal type ConfigStopType");
        }

        public static readonly ConfigStopTypeConverter Singleton = new ConfigStopTypeConverter();
    }

    internal class ViewerAuthorizationTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ViewerAuthorizationType) || t == typeof(ViewerAuthorizationType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "ViewerAuthorization")
            {
                return ViewerAuthorizationType.ViewerAuthorization;
            }
            throw new Exception("Cannot unmarshal type ViewerAuthorizationType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ViewerAuthorizationType)untypedValue;
            if (value == ViewerAuthorizationType.ViewerAuthorization)
            {
                serializer.Serialize(writer, "ViewerAuthorization");
                return;
            }
            throw new Exception("Cannot marshal type ViewerAuthorizationType");
        }

        public static readonly ViewerAuthorizationTypeConverter Singleton = new ViewerAuthorizationTypeConverter();
    }

    internal class PollStoppedTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PollStoppedType) || t == typeof(PollStoppedType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "PollStopped")
            {
                return PollStoppedType.PollStopped;
            }
            throw new Exception("Cannot unmarshal type PollStoppedType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PollStoppedType)untypedValue;
            if (value == PollStoppedType.PollStopped)
            {
                serializer.Serialize(writer, "PollStopped");
                return;
            }
            throw new Exception("Cannot marshal type PollStoppedType");
        }

        public static readonly PollStoppedTypeConverter Singleton = new PollStoppedTypeConverter();
    }

    internal class DataEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataEnum) || t == typeof(DataEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "anonymous":
                    return DataEnum.Anonymous;
                case "broadcaster":
                    return DataEnum.Broadcaster;
                case "linked":
                    return DataEnum.Linked;
                case "moderator":
                    return DataEnum.Moderator;
                case "subscriber":
                    return DataEnum.Subscriber;
                case "unlinked":
                    return DataEnum.Unlinked;
            }
            throw new Exception("Cannot unmarshal type DataEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataEnum)untypedValue;
            switch (value)
            {
                case DataEnum.Anonymous:
                    serializer.Serialize(writer, "anonymous");
                    return;
                case DataEnum.Broadcaster:
                    serializer.Serialize(writer, "broadcaster");
                    return;
                case DataEnum.Linked:
                    serializer.Serialize(writer, "linked");
                    return;
                case DataEnum.Moderator:
                    serializer.Serialize(writer, "moderator");
                    return;
                case DataEnum.Subscriber:
                    serializer.Serialize(writer, "subscriber");
                    return;
                case DataEnum.Unlinked:
                    serializer.Serialize(writer, "unlinked");
                    return;
            }
            throw new Exception("Cannot marshal type DataEnum");
        }

        public static readonly DataEnumConverter Singleton = new DataEnumConverter();
    }

    internal class ViewerRoleTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ViewerRoleType) || t == typeof(ViewerRoleType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Role")
            {
                return ViewerRoleType.Role;
            }
            throw new Exception("Cannot unmarshal type ViewerRoleType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ViewerRoleType)untypedValue;
            if (value == ViewerRoleType.Role)
            {
                serializer.Serialize(writer, "Role");
                return;
            }
            throw new Exception("Cannot marshal type ViewerRoleType");
        }

        public static readonly ViewerRoleTypeConverter Singleton = new ViewerRoleTypeConverter();
    }

    internal class DataModeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataMode) || t == typeof(DataMode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "plurality":
                    return DataMode.Plurality;
                case "reset":
                    return DataMode.Reset;
                case "weighted_random":
                    return DataMode.WeightedRandom;
            }
            throw new Exception("Cannot unmarshal type DataMode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataMode)untypedValue;
            switch (value)
            {
                case DataMode.Plurality:
                    serializer.Serialize(writer, "plurality");
                    return;
                case DataMode.Reset:
                    serializer.Serialize(writer, "reset");
                    return;
                case DataMode.WeightedRandom:
                    serializer.Serialize(writer, "weighted_random");
                    return;
            }
            throw new Exception("Cannot marshal type DataMode");
        }

        public static readonly DataModeConverter Singleton = new DataModeConverter();
    }

    internal class VoteTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VoteType) || t == typeof(VoteType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Vote")
            {
                return VoteType.Vote;
            }
            throw new Exception("Cannot unmarshal type VoteType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VoteType)untypedValue;
            if (value == VoteType.Vote)
            {
                serializer.Serialize(writer, "Vote");
                return;
            }
            throw new Exception("Cannot marshal type VoteType");
        }

        public static readonly VoteTypeConverter Singleton = new VoteTypeConverter();
    }
}
